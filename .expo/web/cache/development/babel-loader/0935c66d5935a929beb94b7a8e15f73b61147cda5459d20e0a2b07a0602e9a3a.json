{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useReducer, useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5 } from \"../helper/extrapropertise\";\nimport { blobToBase64, deepCopyObject } from \"../helper/helper\";\nimport { dataview } from \"../styles/Dataview\";\nimport ModallImageView from \"../screens/ModalImageView\";\nimport { Divider } from 'react-native-paper';\nimport { CommonClass } from \"../styles/Commonclass\";\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport LoadingSpinner from \"./LoadingSpinneer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ADD_PROPS_TYPE = \"Add_Property\";\nvar REMOVE_PROPS_TYPE = \"Remove_Property\";\nvar ADD_ARRAY = \"push\";\nvar UPDATE_PROP_VALUES = \"update\";\nvar reducer = function reducer(state, action) {\n  var _action$payload;\n  var currentState = deepCopyObject(state);\n  if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\n    currentState[action.payload.name] = _toConsumableArray(state[action.payload.name]);\n  }\n  switch (action.type) {\n    case ADD_PROPS_TYPE:\n      var data = undefined;\n      if ((_action$payload = action.payload) != null && _action$payload.ContentType) {\n        data = {\n          value: action.payload.value,\n          ContentType: action.payload.ContentType,\n          fileName: action.payload.fileName\n        };\n      } else {\n        data = action.payload.value;\n      }\n      currentState[action.payload.name] = data;\n      break;\n    case ADD_ARRAY:\n      if (!currentState[action.payload.name]) {\n        currentState[action.payload.name] = [];\n      }\n      currentState[action.payload.name].push({});\n      break;\n    case UPDATE_PROP_VALUES:\n      currentState[action.payload.name][action.payload.index] = {\n        value: action.payload.value,\n        ContentType: action.payload.ContentType,\n        fileName: action.payload.fileName\n      };\n      break;\n    case REMOVE_PROPS_TYPE:\n      delete currentState[action.payload];\n      break;\n    default:\n  }\n  return currentState;\n};\nexport var ProjectModal = function ProjectModal(_ref) {\n  var _Object$entries, _Object$entries2, _Object$entries3, _Object$entries4;\n  var _ref$init = _ref.init,\n    init = _ref$init === void 0 ? {} : _ref$init,\n    onSubmit = _ref.onSubmit,\n    modalVisible = _ref.modalVisible,\n    setModalVisible = _ref.setModalVisible;\n  var _useReducer = useReducer(reducer, init),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var ConvertToBase64 = function () {\n    var _ref2 = _asyncToGenerator(function* (index, name, e) {\n      var _e$target$files$, _e$target$files$2, _e$target$files$3;\n      var data = yield blobToBase64(e.target.files[0]);\n      console.log((_e$target$files$ = e.target.files[0]) == null ? void 0 : _e$target$files$.type);\n      dispatch({\n        type: UPDATE_PROP_VALUES,\n        payload: {\n          ContentType: (_e$target$files$2 = e.target.files[0]) == null ? void 0 : _e$target$files$2.type,\n          index: index,\n          name: name,\n          value: data,\n          fileName: (_e$target$files$3 = e.target.files[0]) == null ? void 0 : _e$target$files$3.name\n        }\n      });\n    });\n    return function ConvertToBase64(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var Onchange = function () {\n    var _ref3 = _asyncToGenerator(function* (e, element) {\n      if (element.type === SchemaTypes.file) {\n        var _e$target$files$4, _e$target$files$5;\n        var _data = yield blobToBase64(e.target.files[0]);\n        console.log(e.target.files[0]);\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            fileName: (_e$target$files$4 = e.target.files[0]) == null ? void 0 : _e$target$files$4.name,\n            name: element.name,\n            value: _data,\n            ContentType: (_e$target$files$5 = e.target.files[0]) == null ? void 0 : _e$target$files$5.type\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            name: element.name,\n            value: e.target.value\n          }\n        });\n      }\n    });\n    return function Onchange(_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var queryClient = useQueryClient();\n  var _useMutation = useMutation({\n      mutationFn: function mutationFn() {\n        return onSubmit(state);\n      },\n      onSuccess: function onSuccess() {\n        queryClient.invalidateQueries({\n          predicate: function predicate(query) {\n            return query.queryKey.includes(UPDATE_ON_ACCOUNT);\n          }\n        });\n      }\n    }),\n    data = _useMutation.data,\n    isLoading = _useMutation.isLoading,\n    error = _useMutation.error,\n    mutate = _useMutation.mutate;\n  console.log(isLoading);\n  console.log(data);\n  if (isLoading) {\n    return _jsx(View, {\n      children: _jsx(LoadingSpinner, {\n        size: \"large\"\n      })\n    });\n  }\n  if (error) {\n    return _jsx(View, {\n      children: _jsx(View, {\n        children: error\n      })\n    });\n  }\n  if (data) {\n    return _jsx(View, {\n      children: \"Added Successfully !!\"\n    });\n  }\n  return _jsx(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      return setModalVisible(false);\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        height: 'auto'\n      },\n      children: _jsxs(ScrollView, {\n        style: {\n          backgroundColor: 'white',\n          padding: 20,\n          borderRadius: 10\n        },\n        children: [_jsx(Text, {\n          children: \"Section 1: Client Basic Details\"\n        }), Section1.map(function (element) {\n          return _jsxs(_Fragment, {\n            children: [_jsx(\"label\", {\n              for: element.name,\n              style: {\n                marginTop: 0\n              },\n              children: element.placeholder\n            }), _jsx(\"input\", {\n              id: element.name,\n              placeholder: element.placeholder,\n              value: state[element.name] ? state[element.name] : \"\",\n              onChange: function onChange(e) {\n                return Onchange(e, element);\n              },\n              type: element.type,\n              style: element.style\n            })]\n          });\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 2:Add Presentation Drawing\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.PresentationDraw.name]) && ((_Object$entries = Object.entries(state[Propertylist.PresentationDraw.name])) == null ? void 0 : _Object$entries.map(function (_ref4, index) {\n            var _ref5 = _slicedToArray(_ref4, 2),\n              key = _ref5[0],\n              value = _ref5[1];\n            return _jsxs(View, {\n              children: [_jsx(\"input\", {\n                id: Propertylist.PresentationDraw.name,\n                placeholder: Propertylist.PresentationDraw.placeholder,\n                onChange: (function () {\n                  var _ref6 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.PresentationDraw.name, e);\n                  });\n                  return function (_x6) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.PresentationDraw.type,\n                style: Propertylist.PresentationDraw.style\n              }), value && Propertylist.PresentationDraw.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.PresentationDraw.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 3: Add 3d Models\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.FileModel3D.name]) && ((_Object$entries2 = Object.entries(state[Propertylist.FileModel3D.name])) == null ? void 0 : _Object$entries2.map(function (_ref7, index) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              key = _ref8[0],\n              value = _ref8[1];\n            return _jsxs(View, {\n              children: [_jsx(\"input\", {\n                id: Propertylist.FileModel3D.name,\n                placeholder: Propertylist.FileModel3D.placeholder,\n                onChange: (function () {\n                  var _ref9 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.FileModel3D.name, e);\n                  });\n                  return function (_x7) {\n                    return _ref9.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.FileModel3D.type,\n                style: Propertylist.FileModel3D.style\n              }), value && Propertylist.FileModel3D.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.FileModel3D.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 4\"\n        }), Section4.map(function (element) {\n          return _jsxs(_Fragment, {\n            children: [_jsx(\"label\", {\n              for: element.name,\n              style: {\n                marginTop: 0\n              },\n              children: element.placeholder\n            }), _jsx(\"input\", {\n              id: element.name,\n              placeholder: element.placeholder,\n              value: state[element.name] ? state[element.name] : \"\",\n              onChange: function onChange(e) {\n                return Onchange(e, element);\n              },\n              type: element.type,\n              style: element.style\n            })]\n          });\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 5: Add RCC Drawing\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.RCCDrawing1.name]) && ((_Object$entries3 = Object.entries(state[Propertylist.RCCDrawing1.name])) == null ? void 0 : _Object$entries3.map(function (_ref10, index) {\n            var _ref11 = _slicedToArray(_ref10, 2),\n              key = _ref11[0],\n              value = _ref11[1];\n            return _jsxs(View, {\n              children: [_jsx(\"input\", {\n                id: Propertylist.RCCDrawing1.name,\n                placeholder: Propertylist.RCCDrawing1.placeholder,\n                onChange: (function () {\n                  var _ref12 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.RCCDrawing1.name, e);\n                  });\n                  return function (_x8) {\n                    return _ref12.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.RCCDrawing1.type,\n                style: Propertylist.RCCDrawing1.style\n              }), value && Propertylist.RCCDrawing1.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.RCCDrawing1.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 5\"\n        }), Section5.map(function (element) {\n          var value = undefined;\n          if (element.type !== SchemaTypes.file) {\n            value = state[element.name] ? state[element.name] : \"\";\n          } else {\n            console.log(state[element.name]);\n          }\n          return _jsxs(_Fragment, {\n            children: [_jsx(\"label\", {\n              for: element.name,\n              style: {\n                marginTop: 0\n              },\n              children: element.placeholder\n            }), _jsx(\"input\", {\n              id: element.name,\n              placeholder: element.placeholder,\n              value: value,\n              onChange: function onChange(e) {\n                return Onchange(e, element);\n              },\n              type: element.type,\n              style: element.style\n            }), state[element.name] && element.type === SchemaTypes.file && _jsx(ModallImageView, {\n              title: state[element.name].fileName,\n              src: state[element.name].value\n            })]\n          });\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 5:Add Slab files\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.Slab.name]) && ((_Object$entries4 = Object.entries(state[Propertylist.Slab.name])) == null ? void 0 : _Object$entries4.map(function (_ref13, index) {\n            var _ref14 = _slicedToArray(_ref13, 2),\n              key = _ref14[0],\n              value = _ref14[1];\n            return _jsxs(View, {\n              style: dataview.fileContainer,\n              children: [_jsx(\"input\", {\n                id: Propertylist.Slab.name,\n                placeholder: Propertylist.Slab.placeholder,\n                onChange: (function () {\n                  var _ref15 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.Slab.name, e);\n                  });\n                  return function (_x9) {\n                    return _ref15.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.Slab.type,\n                style: Propertylist.Slab.style\n              }), value && Propertylist.Slab.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.Slab.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Button, {\n          title: \"Submit\",\n          onPress: function onPress() {\n            return mutate();\n          }\n        }), _jsx(Button, {\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        })]\n      })\n    })\n  });\n};","map":{"version":3,"names":["React","useReducer","useState","Modal","View","Button","Text","ScrollView","JPG_CONTENT_TYPE","PNG_CONTENT_TYPE","Propertylist","SchemaTypes","Section1","Section4","Section5","blobToBase64","deepCopyObject","dataview","ModallImageView","Divider","CommonClass","useMutation","useQueryClient","LoadingSpinner","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ADD_PROPS_TYPE","REMOVE_PROPS_TYPE","ADD_ARRAY","UPDATE_PROP_VALUES","reducer","state","action","_action$payload","currentState","type","payload","name","_toConsumableArray","data","undefined","ContentType","value","fileName","push","index","ProjectModal","_ref","_Object$entries","_Object$entries2","_Object$entries3","_Object$entries4","_ref$init","init","onSubmit","modalVisible","setModalVisible","_useReducer","_useReducer2","_slicedToArray","dispatch","ConvertToBase64","_ref2","_asyncToGenerator","e","_e$target$files$","_e$target$files$2","_e$target$files$3","target","files","console","log","_x","_x2","_x3","apply","arguments","Onchange","_ref3","element","file","_e$target$files$4","_e$target$files$5","_x4","_x5","queryClient","_useMutation","mutationFn","onSuccess","invalidateQueries","predicate","query","queryKey","includes","UPDATE_ON_ACCOUNT","isLoading","error","mutate","children","size","animationType","transparent","visible","onRequestClose","style","flex","justifyContent","alignItems","backgroundColor","height","padding","borderRadius","map","for","marginTop","placeholder","id","onChange","sectionTitle","PresentationDraw","Object","entries","_ref4","_ref5","key","_ref6","_x6","src","title","onPress","FileModel3D","_ref7","_ref8","_ref9","_x7","RCCDrawing1","_ref10","_ref11","_ref12","_x8","Slab","_ref13","_ref14","fileContainer","_ref15","_x9"],"sources":["D:/Logingfg - Copy/src/GenericComponent/ProjectModal.js"],"sourcesContent":["import React, { useReducer, useState } from 'react';\r\nimport { Modal, View, Button, Text, ScrollView } from 'react-native';\r\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5 } from '../helper/extrapropertise';\r\nimport { blobToBase64, deepCopyObject } from '../helper/helper';\r\nimport { dataview } from '../styles/Dataview';\r\nimport ModallImageView from '../screens/ModalImageView';\r\nimport { Divider } from 'react-native-paper';\r\nimport { CommonClass } from '../styles/Commonclass';\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport LoadingSpinner from './LoadingSpinneer';\r\n\r\nconst ADD_PROPS_TYPE = \"Add_Property\";\r\nconst REMOVE_PROPS_TYPE = \"Remove_Property\";\r\nconst ADD_ARRAY = \"push\"\r\nconst UPDATE_PROP_VALUES = \"update\"\r\n\r\nconst reducer = (state, action) => {\r\n    var currentState = deepCopyObject(state);\r\n    if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\r\n        currentState[action.payload.name] = [...state[action.payload.name]]\r\n    }\r\n    switch (action.type) {\r\n        case ADD_PROPS_TYPE:\r\n            let data = undefined\r\n            if (action.payload?.ContentType) {\r\n                data = { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName }\r\n            } else {\r\n                data = action.payload.value\r\n            }\r\n            currentState[action.payload.name] = data;\r\n            break;\r\n        case ADD_ARRAY:\r\n            if (!currentState[action.payload.name]) {\r\n\r\n                currentState[action.payload.name] = []\r\n            }\r\n            currentState[action.payload.name].push({})\r\n            break;\r\n        case UPDATE_PROP_VALUES:\r\n            currentState[action.payload.name][action.payload.index] =\r\n                { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName };\r\n            break\r\n        case REMOVE_PROPS_TYPE:\r\n            delete currentState[action.payload];\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return currentState;\r\n};\r\n\r\n\r\nexport const ProjectModal = ({ init = {}, onSubmit, modalVisible, setModalVisible }) => {\r\n    const [state, dispatch] = useReducer(reducer, init);\r\n\r\n    const ConvertToBase64 = async (index, name, e) => {\r\n        let data = await blobToBase64(e.target.files[0])\r\n        console.log(e.target.files[0]?.type);\r\n        dispatch({\r\n            type: UPDATE_PROP_VALUES, payload:\r\n                { ContentType: e.target.files[0]?.type, index: index, name: name, value: data, fileName: e.target.files[0]?.name }\r\n        })\r\n    }\r\n    const Onchange = async (e, element) => {\r\n        if (element.type === SchemaTypes.file) {\r\n            let data = await blobToBase64(e.target.files[0])\r\n            console.log(e.target.files[0]);\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { fileName: e.target.files[0]?.name, name: element.name, value: data, ContentType: e.target.files[0]?.type } })\r\n        } else {\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { name: element.name, value: e.target.value } })\r\n        }\r\n    }\r\n    const queryClient = useQueryClient();\r\n\r\n    const { data, isLoading, error, mutate } = useMutation({\r\n        mutationFn: () => onSubmit(state),\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({\r\n                predicate: (query) =>\r\n                    query.queryKey.includes(UPDATE_ON_ACCOUNT)\r\n            })\r\n        },\r\n\r\n    })\r\n    console.log(isLoading);\r\n    console.log(data);\r\n    if (isLoading) {\r\n        return (\r\n            <View >\r\n                <LoadingSpinner size='large' />\r\n            </View >\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <View >\r\n                <View>\r\n                    {error}\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n    if (data) {\r\n        return (\r\n            <View>\r\n                Added Successfully !!\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            animationType=\"slide\"\r\n            transparent={true}\r\n            visible={modalVisible}\r\n            onRequestClose={() => setModalVisible(false)}\r\n        >\r\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)', height: 'auto' }}>\r\n                <ScrollView style={{ backgroundColor: 'white', padding: 20, borderRadius: 10 }}>\r\n                    <Text>Section 1: Client Basic Details</Text>\r\n                    {\r\n                        Section1.map(element => {\r\n                            return (\r\n                                <>\r\n                                    <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                    <input\r\n                                        id={element.name}\r\n                                        placeholder={element.placeholder}\r\n                                        value={(state[element.name]) ? state[element.name] : \"\"}\r\n                                        onChange={(e) =>\r\n                                            Onchange(e, element)\r\n                                        }\r\n                                        type={element.type}\r\n                                        style={element.style}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 2:Add Presentation Drawing</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.PresentationDraw.name] && Object.entries(state[Propertylist.PresentationDraw.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View >\r\n                                        <input\r\n                                            id={Propertylist.PresentationDraw.name}\r\n                                            placeholder={Propertylist.PresentationDraw.placeholder}\r\n                                            // value={element}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.PresentationDraw.name, e)\r\n                                            }\r\n                                            type={Propertylist.PresentationDraw.type}\r\n                                            style={Propertylist.PresentationDraw.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.PresentationDraw.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.PresentationDraw.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 3: Add 3d Models</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.FileModel3D.name] && Object.entries(state[Propertylist.FileModel3D.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View >\r\n                                        <input\r\n                                            id={Propertylist.FileModel3D.name}\r\n                                            placeholder={Propertylist.FileModel3D.placeholder}\r\n                                            // value={element}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.FileModel3D.name, e)\r\n                                            }\r\n                                            type={Propertylist.FileModel3D.type}\r\n                                            style={Propertylist.FileModel3D.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.FileModel3D.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.FileModel3D.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 4</Text>\r\n                    {\r\n                        Section4.map(element => {\r\n                            return (\r\n                                <>\r\n                                    <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                    <input\r\n                                        id={element.name}\r\n                                        placeholder={element.placeholder}\r\n                                        value={state[element.name] ? state[element.name] : \"\"}\r\n                                        onChange={(e) =>\r\n                                            Onchange(e, element)\r\n                                        }\r\n                                        type={element.type}\r\n                                        style={element.style}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 5: Add RCC Drawing</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.RCCDrawing1.name] && Object.entries(state[Propertylist.RCCDrawing1.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View >\r\n                                        <input\r\n                                            id={Propertylist.RCCDrawing1.name}\r\n                                            placeholder={Propertylist.RCCDrawing1.placeholder}\r\n                                            // value={element}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.RCCDrawing1.name, e)\r\n                                            }\r\n                                            type={Propertylist.RCCDrawing1.type}\r\n                                            style={Propertylist.RCCDrawing1.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.RCCDrawing1.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.RCCDrawing1.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 5</Text>\r\n                    {\r\n                        Section5.map(element => {\r\n                            let value = undefined\r\n                            if (element.type !== SchemaTypes.file) {\r\n                                value = state[element.name] ? state[element.name] : \"\"\r\n                            } else {\r\n                                console.log(state[element.name]);\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                    <input\r\n                                        id={element.name}\r\n                                        placeholder={element.placeholder}\r\n                                        value={value}\r\n                                        onChange={(e) =>\r\n                                            Onchange(e, element)\r\n                                        }\r\n                                        type={element.type}\r\n                                        style={element.style}\r\n                                    />\r\n                                    {\r\n                                        (state[element.name] && element.type === SchemaTypes.file)\r\n                                        &&\r\n                                        <ModallImageView\r\n                                            title={state[element.name].fileName}\r\n                                            src={state[element.name].value}\r\n                                        />\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 5:Add Slab files</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.Slab.name] && Object.entries(state[Propertylist.Slab.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View style={dataview.fileContainer}>\r\n                                        <input\r\n                                            id={Propertylist.Slab.name}\r\n                                            placeholder={Propertylist.Slab.placeholder}\r\n                                            // value={value}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.Slab.name, e)\r\n                                            }\r\n                                            type={Propertylist.Slab.type}\r\n                                            style={Propertylist.Slab.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.Slab.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.Slab.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Button title=\"Submit\" onPress={() => mutate()} />\r\n                    <Button title=\"Close\" onPress={() => setModalVisible(false)} />\r\n                </ScrollView>\r\n            </View>\r\n        </Modal>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}