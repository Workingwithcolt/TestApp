{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useReducer, useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5, Section6 } from \"../helper/extrapropertise\";\nimport { blobToBase64, deepCopyObject, getDateString } from \"../helper/helper\";\nimport { dataview } from \"../styles/Dataview\";\nimport { Divider } from 'react-native-paper';\nimport { CommonClass } from \"../styles/Commonclass\";\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport LoadingSpinner from \"./LoadingSpinneer\";\nimport { UPDATE_ON_ACCOUNT } from \"../Endpoints/endpoints\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { GenericDatePicker } from \"./DatePicker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ADD_PROPS_TYPE = \"Add_Property\";\nvar REMOVE_PROPS_TYPE = \"Remove_Property\";\nvar ADD_ARRAY = \"push\";\nvar UPDATE_PROP_VALUES = \"update\";\nvar reducer = function reducer(state, action) {\n  var _action$payload;\n  var currentState = deepCopyObject(state);\n  if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\n    currentState[action.payload.name] = _toConsumableArray(state[action.payload.name]);\n  }\n  switch (action.type) {\n    case ADD_PROPS_TYPE:\n      var data = undefined;\n      if ((_action$payload = action.payload) != null && _action$payload.ContentType) {\n        data = {\n          value: action.payload.value,\n          ContentType: action.payload.ContentType,\n          fileName: action.payload.fileName\n        };\n      } else {\n        data = action.payload.value;\n      }\n      currentState[action.payload.name] = data;\n      break;\n    case ADD_ARRAY:\n      if (!currentState[action.payload.name]) {\n        currentState[action.payload.name] = [];\n      }\n      currentState[action.payload.name].push({});\n      break;\n    case UPDATE_PROP_VALUES:\n      currentState[action.payload.name][action.payload.index] = {\n        value: action.payload.value,\n        ContentType: action.payload.ContentType,\n        fileName: action.payload.fileName\n      };\n      break;\n    case REMOVE_PROPS_TYPE:\n      delete currentState[action.payload];\n      break;\n    default:\n  }\n  return currentState;\n};\nexport var ProjectModal = function ProjectModal(_ref) {\n  var _Object$entries, _Object$entries2, _Object$entries3, _Object$entries4;\n  var _ref$init = _ref.init,\n    init = _ref$init === void 0 ? {} : _ref$init,\n    onSubmit = _ref.onSubmit,\n    modalVisible = _ref.modalVisible,\n    setModalVisible = _ref.setModalVisible;\n  var _useReducer = useReducer(reducer, init),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var queryClient = useQueryClient();\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    date = _useState2[0],\n    setDate = _useState2[1];\n  var _useState3 = useState('date'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    mode = _useState4[0],\n    setMode = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    show = _useState6[0],\n    setShow = _useState6[1];\n  var onChan = function onChan(event, selectedDate) {\n    var currentDate = selectedDate;\n    setShow(false);\n    setDate(currentDate);\n  };\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n  var ConvertToBase64 = function () {\n    var _ref2 = _asyncToGenerator(function* (index, name, e) {\n      var _e$target$files$, _e$target$files$2;\n      var data = yield blobToBase64(e.target.files[0]);\n      dispatch({\n        type: UPDATE_PROP_VALUES,\n        payload: {\n          ContentType: (_e$target$files$ = e.target.files[0]) == null ? void 0 : _e$target$files$.type,\n          index: index,\n          name: name,\n          value: data,\n          fileName: (_e$target$files$2 = e.target.files[0]) == null ? void 0 : _e$target$files$2.name\n        }\n      });\n    });\n    return function ConvertToBase64(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var Onchange = function () {\n    var _ref3 = _asyncToGenerator(function* (e, element) {\n      console.log(e);\n      if (element.type === SchemaTypes.file) {\n        var _e$target$files$3, _e$target$files$4;\n        var data = yield blobToBase64(e.target.files[0]);\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            fileName: (_e$target$files$3 = e.target.files[0]) == null ? void 0 : _e$target$files$3.name,\n            name: element.name,\n            value: data,\n            ContentType: (_e$target$files$4 = e.target.files[0]) == null ? void 0 : _e$target$files$4.type\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            name: element.name,\n            value: e\n          }\n        });\n      }\n    });\n    return function Onchange(_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var _useMutation = useMutation({\n      mutationFn: function () {\n        var _mutationFn = _asyncToGenerator(function* () {\n          return yield onSubmit(state);\n        });\n        function mutationFn() {\n          return _mutationFn.apply(this, arguments);\n        }\n        return mutationFn;\n      }(),\n      onSuccess: function onSuccess() {\n        queryClient.invalidateQueries({\n          predicate: function predicate(query) {\n            return query.queryKey.includes(UPDATE_ON_ACCOUNT);\n          }\n        });\n      }\n    }),\n    isSuccess = _useMutation.isSuccess,\n    isPending = _useMutation.isPending,\n    error = _useMutation.error,\n    mutate = _useMutation.mutate;\n  var stausClass = isPending || isSuccess ? {\n    position: 'relative',\n    top: '50%',\n    width: '80%',\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10\n  } : {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10\n  };\n  console.log(\"it is ac\");\n  console.log(state);\n  return _jsx(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      return setModalVisible(false);\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        height: 'auto'\n      },\n      children: _jsxs(ScrollView, {\n        style: stausClass,\n        children: [isPending ? _jsx(View, {\n          children: _jsx(LoadingSpinner, {\n            size: \"large\"\n          })\n        }) : error ? _jsx(View, {\n          children: _jsx(Text, {\n            children: error\n          })\n        }) : isSuccess ? _jsx(View, {\n          children: _jsx(Text, {\n            children: \"Added or Updated Successfully !!\"\n          })\n        }) : _jsxs(View, {\n          children: [_jsx(Text, {\n            children: \"Section 1: Client Basic Details\"\n          }), Section1.map(function (element, index) {\n            return _jsxs(View, {\n              children: [_jsx(Text, {\n                style: {\n                  marginTop: 0\n                },\n                children: element.placeholder\n              }), element.type === SchemaTypes.String ? _jsx(View, {\n                children: _jsx(TextInput, {\n                  textContentType: \"\",\n                  style: element.style,\n                  onChangeText: function onChangeText(e) {\n                    return Onchange(e, element);\n                  },\n                  placeholder: element.placeholder,\n                  value: state[element.name] ? state[element.name] : \"\"\n                })\n              }) : _jsx(View, {\n                children: _jsx(GenericDatePicker, {\n                  Onchange: Onchange,\n                  value: state[element.name] ? new Date(state[element.name]) : new Date(1598051730000),\n                  element: element\n                }, element.name)\n              })]\n            }, index);\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 2:Add Presentation Drawing\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.PresentationDraw.name]) && ((_Object$entries = Object.entries(state[Propertylist.PresentationDraw.name])) == null ? void 0 : _Object$entries.map(function (_ref4, index) {\n              var _ref5 = _slicedToArray(_ref4, 2),\n                key = _ref5[0],\n                value = _ref5[1];\n              return _jsxs(View, {\n                children: [_jsx(Text, {\n                  children: \"chetan\"\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return console.log(\"it is picker\");\n                  },\n                  children: _jsxs(Text, {\n                    style: styles.uploadTxt,\n                    children: [\" \", 'upload  doc']\n                  })\n                })]\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.PresentationDraw.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 3: Add 3d Models\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.FileModel3D.name]) && ((_Object$entries2 = Object.entries(state[Propertylist.FileModel3D.name])) == null ? void 0 : _Object$entries2.map(function (_ref6, index) {\n              var _ref7 = _slicedToArray(_ref6, 2),\n                key = _ref7[0],\n                value = _ref7[1];\n              return _jsx(View, {\n                children: _jsx(Text, {\n                  children: \"chetan\"\n                })\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.FileModel3D.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 4\"\n          }), Section4.map(function (element) {\n            return _jsx(View, {\n              children: _jsx(Text, {\n                children: \"chetan\"\n              })\n            });\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 5: Add RCC Drawing\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.RCCDrawing1.name]) && ((_Object$entries3 = Object.entries(state[Propertylist.RCCDrawing1.name])) == null ? void 0 : _Object$entries3.map(function (_ref8, index) {\n              var _ref9 = _slicedToArray(_ref8, 2),\n                key = _ref9[0],\n                value = _ref9[1];\n              return _jsx(View, {\n                children: _jsx(Text, {\n                  children: \"chetan\"\n                })\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.RCCDrawing1.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 5\"\n          }), Section5.map(function (element) {\n            var value = undefined;\n            if (element.type !== SchemaTypes.file) {\n              value = state[element.name] ? state[element.name] : \"\";\n            }\n            return _jsx(View, {\n              children: _jsx(Text, {\n                children: \"chetan\"\n              })\n            });\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 5:Add Slab files\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.Slab.name]) && ((_Object$entries4 = Object.entries(state[Propertylist.Slab.name])) == null ? void 0 : _Object$entries4.map(function (_ref10, index) {\n              var _ref11 = _slicedToArray(_ref10, 2),\n                key = _ref11[0],\n                value = _ref11[1];\n              return _jsx(View, {\n                style: dataview.fileContainer,\n                children: _jsx(Text, {\n                  children: \"chetan\"\n                })\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.Slab.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 6\"\n          }), Section6.map(function (element) {\n            var value = undefined;\n            if (element.type !== SchemaTypes.file) {\n              value = state[element.name] ? state[element.name] : \"\";\n            }\n            return _jsx(View, {\n              children: _jsx(Text, {\n                children: \"chetan\"\n              })\n            });\n          }), _jsx(Button, {\n            title: \"Submit\",\n            onPress: function onPress() {\n              return mutate();\n            }\n          })]\n        }), _jsx(Button, {\n          disabled: isPending,\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        })]\n      })\n    })\n  });\n};","map":{"version":3,"names":["React","useReducer","useState","Modal","View","Button","Text","ScrollView","TextInput","TouchableOpacity","JPG_CONTENT_TYPE","PNG_CONTENT_TYPE","Propertylist","SchemaTypes","Section1","Section4","Section5","Section6","blobToBase64","deepCopyObject","getDateString","dataview","Divider","CommonClass","useMutation","useQueryClient","LoadingSpinner","UPDATE_ON_ACCOUNT","DateTimePicker","GenericDatePicker","jsx","_jsx","jsxs","_jsxs","ADD_PROPS_TYPE","REMOVE_PROPS_TYPE","ADD_ARRAY","UPDATE_PROP_VALUES","reducer","state","action","_action$payload","currentState","type","payload","name","_toConsumableArray","data","undefined","ContentType","value","fileName","push","index","ProjectModal","_ref","_Object$entries","_Object$entries2","_Object$entries3","_Object$entries4","_ref$init","init","onSubmit","modalVisible","setModalVisible","_useReducer","_useReducer2","_slicedToArray","dispatch","queryClient","_useState","_useState2","date","setDate","_useState3","_useState4","mode","setMode","_useState5","_useState6","show","setShow","onChan","event","selectedDate","currentDate","showMode","currentMode","ConvertToBase64","_ref2","_asyncToGenerator","e","_e$target$files$","_e$target$files$2","target","files","_x","_x2","_x3","apply","arguments","Onchange","_ref3","element","console","log","file","_e$target$files$3","_e$target$files$4","_x4","_x5","_useMutation","mutationFn","_mutationFn","onSuccess","invalidateQueries","predicate","query","queryKey","includes","isSuccess","isPending","error","mutate","stausClass","position","top","width","backgroundColor","padding","borderRadius","animationType","transparent","visible","onRequestClose","children","style","flex","justifyContent","alignItems","height","size","map","marginTop","placeholder","String","textContentType","onChangeText","Date","sectionTitle","PresentationDraw","Object","entries","_ref4","_ref5","key","onPress","styles","uploadTxt","title","FileModel3D","_ref6","_ref7","RCCDrawing1","_ref8","_ref9","Slab","_ref10","_ref11","fileContainer","disabled"],"sources":["D:/Logingfg - Copy/src/GenericComponent/ProjectModal.js"],"sourcesContent":["import React, { useReducer, useState } from 'react';\r\nimport { Modal, View, Button, Text, ScrollView, TextInput, TouchableOpacity } from 'react-native';\r\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5, Section6 } from '../helper/extrapropertise';\r\nimport { blobToBase64, deepCopyObject, getDateString } from '../helper/helper';\r\nimport { dataview } from '../styles/Dataview';\r\n\r\nimport { Divider } from 'react-native-paper';\r\nimport { CommonClass } from '../styles/Commonclass';\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport LoadingSpinner from './LoadingSpinneer';\r\nimport { UPDATE_ON_ACCOUNT } from '../Endpoints/endpoints';\r\nimport DateTimePicker from \"@react-native-community/datetimepicker\"\r\nimport { GenericDatePicker } from './DatePicker';\r\n\r\nconst ADD_PROPS_TYPE = \"Add_Property\";\r\nconst REMOVE_PROPS_TYPE = \"Remove_Property\";\r\nconst ADD_ARRAY = \"push\"\r\nconst UPDATE_PROP_VALUES = \"update\"\r\n\r\nconst reducer = (state, action) => {\r\n    var currentState = deepCopyObject(state);\r\n    if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\r\n        currentState[action.payload.name] = [...state[action.payload.name]]\r\n    }\r\n    switch (action.type) {\r\n        case ADD_PROPS_TYPE:\r\n            let data = undefined\r\n            if (action.payload?.ContentType) {\r\n                data = { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName }\r\n            } else {\r\n                data = action.payload.value\r\n            }\r\n            currentState[action.payload.name] = data;\r\n            break;\r\n        case ADD_ARRAY:\r\n            if (!currentState[action.payload.name]) {\r\n\r\n                currentState[action.payload.name] = []\r\n            }\r\n            currentState[action.payload.name].push({})\r\n            break;\r\n        case UPDATE_PROP_VALUES:\r\n            currentState[action.payload.name][action.payload.index] =\r\n                { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName };\r\n            break\r\n        case REMOVE_PROPS_TYPE:\r\n            delete currentState[action.payload];\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return currentState;\r\n};\r\n\r\n\r\nexport const ProjectModal = ({ init = {}, onSubmit, modalVisible, setModalVisible }) => {\r\n    const [state, dispatch] = useReducer(reducer, init);\r\n    const queryClient = useQueryClient();\r\n    const [date, setDate] = useState(undefined);\r\n    const [mode, setMode] = useState('date');\r\n    const [show, setShow] = useState(false);\r\n\r\n    const onChan = (event, selectedDate) => {\r\n        const currentDate = selectedDate;\r\n        setShow(false);\r\n        setDate(currentDate);\r\n    };\r\n\r\n    const showMode = (currentMode) => {\r\n        setShow(true);\r\n        setMode(currentMode);\r\n    };\r\n\r\n    const ConvertToBase64 = async (index, name, e) => {\r\n        let data = await blobToBase64(e.target.files[0])\r\n        dispatch({\r\n            type: UPDATE_PROP_VALUES, payload:\r\n                { ContentType: e.target.files[0]?.type, index: index, name: name, value: data, fileName: e.target.files[0]?.name }\r\n        })\r\n    }\r\n    const Onchange = async (e, element) => {\r\n        console.log(e);\r\n        if (element.type === SchemaTypes.file) {\r\n            let data = await blobToBase64(e.target.files[0])\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { fileName: e.target.files[0]?.name, name: element.name, value: data, ContentType: e.target.files[0]?.type } })\r\n        } else {\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { name: element.name, value: e } })\r\n        }\r\n    }\r\n\r\n    const { isSuccess, isPending, error, mutate } = useMutation({\r\n        mutationFn: async () => await onSubmit(state),\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({\r\n                predicate: (query) =>\r\n                    query.queryKey.includes(UPDATE_ON_ACCOUNT)\r\n            })\r\n        },\r\n\r\n    })\r\n\r\n    var stausClass = (isPending || isSuccess) ? {\r\n        position: 'relative', top: '50%', width: '80%', backgroundColor: 'white', padding: 20, borderRadius: 10\r\n    } : { backgroundColor: 'white', padding: 20, borderRadius: 10 }\r\n    console.log(\"it is ac\");\r\n\r\n\r\n    console.log(state);\r\n    return (\r\n        <Modal\r\n            animationType=\"slide\"\r\n            transparent={true}\r\n            visible={modalVisible}\r\n            onRequestClose={() => setModalVisible(false)}\r\n        >\r\n\r\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)', height: 'auto' }}>\r\n                <ScrollView style={stausClass}>\r\n                    {\r\n                        isPending ?\r\n                            <View>\r\n                                <LoadingSpinner size='large' />\r\n                            </View >\r\n                            : error ? (<View>\r\n                                <Text>{error}</Text>\r\n                            </View>)\r\n                                : isSuccess ?\r\n                                    (<View>\r\n                                        <Text>Added or Updated Successfully !!</Text>\r\n                                    </View>)\r\n                                    :\r\n                                    <View>\r\n                                        <Text>Section 1: Client Basic Details</Text>\r\n                                        {\r\n                                            Section1.map((element, index) => {\r\n                                                return (\r\n                                                    <View key={index}>\r\n                                                        <Text style={{ marginTop: 0 }}>{element.placeholder}</Text>\r\n                                                        {\r\n                                                            element.type === SchemaTypes.String\r\n                                                                ?\r\n                                                                <View>\r\n                                                                    <TextInput\r\n                                                                        textContentType=''\r\n                                                                        style={element.style}\r\n                                                                        onChangeText={(e) =>\r\n                                                                            Onchange(e, element)}\r\n                                                                        placeholder={element.placeholder}\r\n                                                                        value={(state[element.name]) ? state[element.name] : \"\"}\r\n                                                                    // keyboardType={element.type}\r\n                                                                    />\r\n                                                                </View>\r\n                                                                :\r\n                                                                <View>\r\n                                                                    <GenericDatePicker\r\n                                                                        Onchange={Onchange}\r\n                                                                        value={(state[element.name]) ? new Date(state[element.name]) : new Date(1598051730000)}\r\n                                                                        key={element.name}\r\n                                                                        element={element}\r\n                                                                    />\r\n                                                                </View>\r\n                                                        }\r\n\r\n                                                    </View>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 2:Add Presentation Drawing</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.PresentationDraw.name] && Object.entries(state[Propertylist.PresentationDraw.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View >\r\n                                                            <Text>chetan</Text>\r\n                                                            <TouchableOpacity\r\n                                                                onPress={() =>console.log(\"it is picker\")}\r\n                                                            >\r\n                                                                <Text style={styles.uploadTxt}> {'upload  doc'}</Text>\r\n                                                            </TouchableOpacity>\r\n                                                            {/* <input\r\n                                                                id={Propertylist.PresentationDraw.name}\r\n                                                                placeholder={Propertylist.PresentationDraw.placeholder}\r\n                                                                // value={element}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.PresentationDraw.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.PresentationDraw.type}\r\n                                                                style={Propertylist.PresentationDraw.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.PresentationDraw.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            } */}\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.PresentationDraw.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 3: Add 3d Models</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.FileModel3D.name] && Object.entries(state[Propertylist.FileModel3D.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View >\r\n                                                            <Text>chetan</Text>\r\n                                                            {/* <input\r\n                                                                id={Propertylist.FileModel3D.name}\r\n                                                                placeholder={Propertylist.FileModel3D.placeholder}\r\n                                                                // value={element}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.FileModel3D.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.FileModel3D.type}\r\n                                                                style={Propertylist.FileModel3D.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.FileModel3D.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            } */}\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.FileModel3D.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 4</Text>\r\n                                        {\r\n                                            Section4.map(element => {\r\n                                                return (\r\n                                                    <View>\r\n                                                        <Text>chetan</Text>\r\n                                                        {/* <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={state[element.name] ? state[element.name] : \"\"}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        /> */}\r\n                                                    </View>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 5: Add RCC Drawing</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.RCCDrawing1.name] && Object.entries(state[Propertylist.RCCDrawing1.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View >\r\n                                                            <Text>chetan</Text>\r\n                                                            {/* <input\r\n                                                                id={Propertylist.RCCDrawing1.name}\r\n                                                                placeholder={Propertylist.RCCDrawing1.placeholder}\r\n                                                                // value={element}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.RCCDrawing1.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.RCCDrawing1.type}\r\n                                                                style={Propertylist.RCCDrawing1.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.RCCDrawing1.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            } */}\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.RCCDrawing1.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 5</Text>\r\n                                        {\r\n                                            Section5.map(element => {\r\n                                                let value = undefined\r\n                                                if (element.type !== SchemaTypes.file) {\r\n                                                    value = state[element.name] ? state[element.name] : \"\"\r\n                                                }\r\n                                                return (\r\n                                                    <View>\r\n                                                        <Text>chetan</Text>\r\n                                                        {/* <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={value}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        />\r\n                                                        {\r\n                                                            (state[element.name] && element.type === SchemaTypes.file)\r\n                                                            &&\r\n                                                            <ModallImageView\r\n                                                                title={state[element.name].fileName}\r\n                                                                src={state[element.name].value}\r\n                                                            />\r\n                                                        } */}\r\n                                                    </View>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 5:Add Slab files</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.Slab.name] && Object.entries(state[Propertylist.Slab.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View style={dataview.fileContainer}>\r\n                                                            {/* <input\r\n                                                                id={Propertylist.Slab.name}\r\n                                                                placeholder={Propertylist.Slab.placeholder}\r\n                                                                // value={value}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.Slab.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.Slab.type}\r\n                                                                style={Propertylist.Slab.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.Slab.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            } */}\r\n                                                            <Text>chetan</Text>\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.Slab.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 6</Text>\r\n                                        {\r\n                                            Section6.map(element => {\r\n                                                let value = undefined\r\n                                                if (element.type !== SchemaTypes.file) {\r\n                                                    value = state[element.name] ? state[element.name] : \"\"\r\n                                                }\r\n                                                return (\r\n                                                    <View>\r\n                                                        <Text>chetan</Text>\r\n                                                        {/* <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={value}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        />\r\n                                                        {\r\n                                                            (state[element.name] && element.type === SchemaTypes.file)\r\n                                                            &&\r\n                                                            <ModallImageView\r\n                                                                title={state[element.name].fileName}\r\n                                                                src={state[element.name].value}\r\n                                                            />\r\n                                                        } */}\r\n                                                    </View>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Button title=\"Submit\" onPress={() => mutate()} />\r\n                                    </View>\r\n\r\n                    }\r\n                    <Button disabled={isPending} title=\"Close\" onPress={() => setModalVisible(false)} />\r\n                </ScrollView>\r\n            </View>\r\n        </Modal>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}