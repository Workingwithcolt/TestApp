{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useReducer, useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5, Section6 } from \"../helper/extrapropertise\";\nimport { blobToBase64, deepCopyObject } from \"../helper/helper\";\nimport { dataview } from \"../styles/Dataview\";\nimport ModallImageView from \"../screens/ModalImageView\";\nimport { Divider } from 'react-native-paper';\nimport { CommonClass } from \"../styles/Commonclass\";\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport LoadingSpinner from \"./LoadingSpinneer\";\nimport { UPDATE_ON_ACCOUNT } from \"../Endpoints/endpoints\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ADD_PROPS_TYPE = \"Add_Property\";\nvar REMOVE_PROPS_TYPE = \"Remove_Property\";\nvar ADD_ARRAY = \"push\";\nvar UPDATE_PROP_VALUES = \"update\";\nvar reducer = function reducer(state, action) {\n  var _action$payload;\n  var currentState = deepCopyObject(state);\n  if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\n    currentState[action.payload.name] = _toConsumableArray(state[action.payload.name]);\n  }\n  switch (action.type) {\n    case ADD_PROPS_TYPE:\n      var data = undefined;\n      if ((_action$payload = action.payload) != null && _action$payload.ContentType) {\n        data = {\n          value: action.payload.value,\n          ContentType: action.payload.ContentType,\n          fileName: action.payload.fileName\n        };\n      } else {\n        data = action.payload.value;\n      }\n      currentState[action.payload.name] = data;\n      break;\n    case ADD_ARRAY:\n      if (!currentState[action.payload.name]) {\n        currentState[action.payload.name] = [];\n      }\n      currentState[action.payload.name].push({});\n      break;\n    case UPDATE_PROP_VALUES:\n      currentState[action.payload.name][action.payload.index] = {\n        value: action.payload.value,\n        ContentType: action.payload.ContentType,\n        fileName: action.payload.fileName\n      };\n      break;\n    case REMOVE_PROPS_TYPE:\n      delete currentState[action.payload];\n      break;\n    default:\n  }\n  return currentState;\n};\nexport var ProjectModal = function ProjectModal(_ref) {\n  var _Object$entries, _Object$entries2, _Object$entries3, _Object$entries4;\n  var _ref$init = _ref.init,\n    init = _ref$init === void 0 ? {} : _ref$init,\n    onSubmit = _ref.onSubmit,\n    modalVisible = _ref.modalVisible,\n    setModalVisible = _ref.setModalVisible;\n  var _useReducer = useReducer(reducer, init),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var queryClient = useQueryClient();\n  var ConvertToBase64 = function () {\n    var _ref2 = _asyncToGenerator(function* (index, name, e) {\n      var _e$target$files$, _e$target$files$2;\n      var data = yield blobToBase64(e.target.files[0]);\n      dispatch({\n        type: UPDATE_PROP_VALUES,\n        payload: {\n          ContentType: (_e$target$files$ = e.target.files[0]) == null ? void 0 : _e$target$files$.type,\n          index: index,\n          name: name,\n          value: data,\n          fileName: (_e$target$files$2 = e.target.files[0]) == null ? void 0 : _e$target$files$2.name\n        }\n      });\n    });\n    return function ConvertToBase64(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var Onchange = function () {\n    var _ref3 = _asyncToGenerator(function* (e, element) {\n      if (element.type === SchemaTypes.file) {\n        var _e$target$files$3, _e$target$files$4;\n        var data = yield blobToBase64(e.target.files[0]);\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            fileName: (_e$target$files$3 = e.target.files[0]) == null ? void 0 : _e$target$files$3.name,\n            name: element.name,\n            value: data,\n            ContentType: (_e$target$files$4 = e.target.files[0]) == null ? void 0 : _e$target$files$4.type\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            name: element.name,\n            value: e.target.value\n          }\n        });\n      }\n    });\n    return function Onchange(_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var _useMutation = useMutation({\n      mutationFn: function () {\n        var _mutationFn = _asyncToGenerator(function* () {\n          return yield onSubmit(state);\n        });\n        function mutationFn() {\n          return _mutationFn.apply(this, arguments);\n        }\n        return mutationFn;\n      }(),\n      onSuccess: function onSuccess() {\n        queryClient.invalidateQueries({\n          predicate: function predicate(query) {\n            return query.queryKey.includes(UPDATE_ON_ACCOUNT);\n          }\n        });\n      }\n    }),\n    isSuccess = _useMutation.isSuccess,\n    isPending = _useMutation.isPending,\n    error = _useMutation.error,\n    mutate = _useMutation.mutate;\n  var stausClass = isPending || isSuccess ? {\n    position: 'relative',\n    top: '50%',\n    width: '80%',\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10\n  } : {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10\n  };\n  return _jsx(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      return setModalVisible(false);\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        height: 'auto'\n      },\n      children: _jsxs(ScrollView, {\n        style: stausClass,\n        children: [isPending ? _jsx(View, {\n          children: _jsx(LoadingSpinner, {\n            size: \"large\"\n          })\n        }) : error ? _jsx(View, {\n          children: error\n        }) : isSuccess ? _jsx(View, {\n          children: \"Added or Updated Successfully !!\"\n        }) : _jsxs(View, {\n          children: [_jsx(Text, {\n            children: \"Section 1: Client Basic Details\"\n          }), Section1.map(function (element) {\n            return _jsxs(_Fragment, {\n              children: [_jsx(\"label\", {\n                for: element.name,\n                style: {\n                  marginTop: 0\n                },\n                children: element.placeholder\n              }), _jsx(\"input\", {\n                id: element.name,\n                placeholder: element.placeholder,\n                value: state[element.name] ? state[element.name] : \"\",\n                onChange: function onChange(e) {\n                  return Onchange(e, element);\n                },\n                type: element.type,\n                style: element.style\n              })]\n            });\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 2:Add Presentation Drawing\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.PresentationDraw.name]) && ((_Object$entries = Object.entries(state[Propertylist.PresentationDraw.name])) == null ? void 0 : _Object$entries.map(function (_ref4, index) {\n              var _ref5 = _slicedToArray(_ref4, 2),\n                key = _ref5[0],\n                value = _ref5[1];\n              return _jsxs(View, {\n                children: [_jsx(\"input\", {\n                  id: Propertylist.PresentationDraw.name,\n                  placeholder: Propertylist.PresentationDraw.placeholder,\n                  onChange: (function () {\n                    var _ref6 = _asyncToGenerator(function* (e) {\n                      return yield ConvertToBase64(index, Propertylist.PresentationDraw.name, e);\n                    });\n                    return function (_x6) {\n                      return _ref6.apply(this, arguments);\n                    };\n                  }()),\n                  type: Propertylist.PresentationDraw.type,\n                  style: Propertylist.PresentationDraw.style\n                }), value && Propertylist.PresentationDraw.type === SchemaTypes.file && _jsx(ModallImageView, {\n                  src: value.value,\n                  title: value.fileName\n                })]\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.PresentationDraw.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 3: Add 3d Models\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.FileModel3D.name]) && ((_Object$entries2 = Object.entries(state[Propertylist.FileModel3D.name])) == null ? void 0 : _Object$entries2.map(function (_ref7, index) {\n              var _ref8 = _slicedToArray(_ref7, 2),\n                key = _ref8[0],\n                value = _ref8[1];\n              return _jsxs(View, {\n                children: [_jsx(\"input\", {\n                  id: Propertylist.FileModel3D.name,\n                  placeholder: Propertylist.FileModel3D.placeholder,\n                  onChange: (function () {\n                    var _ref9 = _asyncToGenerator(function* (e) {\n                      return yield ConvertToBase64(index, Propertylist.FileModel3D.name, e);\n                    });\n                    return function (_x7) {\n                      return _ref9.apply(this, arguments);\n                    };\n                  }()),\n                  type: Propertylist.FileModel3D.type,\n                  style: Propertylist.FileModel3D.style\n                }), value && Propertylist.FileModel3D.type === SchemaTypes.file && _jsx(ModallImageView, {\n                  src: value.value,\n                  title: value.fileName\n                })]\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.FileModel3D.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 4\"\n          }), Section4.map(function (element) {\n            return _jsxs(_Fragment, {\n              children: [_jsx(\"label\", {\n                for: element.name,\n                style: {\n                  marginTop: 0\n                },\n                children: element.placeholder\n              }), _jsx(\"input\", {\n                id: element.name,\n                placeholder: element.placeholder,\n                value: state[element.name] ? state[element.name] : \"\",\n                onChange: function onChange(e) {\n                  return Onchange(e, element);\n                },\n                type: element.type,\n                style: element.style\n              })]\n            });\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 5: Add RCC Drawing\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.RCCDrawing1.name]) && ((_Object$entries3 = Object.entries(state[Propertylist.RCCDrawing1.name])) == null ? void 0 : _Object$entries3.map(function (_ref10, index) {\n              var _ref11 = _slicedToArray(_ref10, 2),\n                key = _ref11[0],\n                value = _ref11[1];\n              return _jsxs(View, {\n                children: [_jsx(\"input\", {\n                  id: Propertylist.RCCDrawing1.name,\n                  placeholder: Propertylist.RCCDrawing1.placeholder,\n                  onChange: (function () {\n                    var _ref12 = _asyncToGenerator(function* (e) {\n                      return yield ConvertToBase64(index, Propertylist.RCCDrawing1.name, e);\n                    });\n                    return function (_x8) {\n                      return _ref12.apply(this, arguments);\n                    };\n                  }()),\n                  type: Propertylist.RCCDrawing1.type,\n                  style: Propertylist.RCCDrawing1.style\n                }), value && Propertylist.RCCDrawing1.type === SchemaTypes.file && _jsx(ModallImageView, {\n                  src: value.value,\n                  title: value.fileName\n                })]\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.RCCDrawing1.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 5\"\n          }), Section5.map(function (element) {\n            var value = undefined;\n            if (element.type !== SchemaTypes.file) {\n              value = state[element.name] ? state[element.name] : \"\";\n            }\n            return _jsxs(_Fragment, {\n              children: [_jsx(\"label\", {\n                for: element.name,\n                style: {\n                  marginTop: 0\n                },\n                children: element.placeholder\n              }), _jsx(\"input\", {\n                id: element.name,\n                placeholder: element.placeholder,\n                value: value,\n                onChange: function onChange(e) {\n                  return Onchange(e, element);\n                },\n                type: element.type,\n                style: element.style\n              }), state[element.name] && element.type === SchemaTypes.file && _jsx(ModallImageView, {\n                title: state[element.name].fileName,\n                src: state[element.name].value\n              })]\n            });\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 5:Add Slab files\"\n          }), _jsxs(View, {\n            children: [(state == null ? void 0 : state[Propertylist.Slab.name]) && ((_Object$entries4 = Object.entries(state[Propertylist.Slab.name])) == null ? void 0 : _Object$entries4.map(function (_ref13, index) {\n              var _ref14 = _slicedToArray(_ref13, 2),\n                key = _ref14[0],\n                value = _ref14[1];\n              return _jsxs(View, {\n                style: dataview.fileContainer,\n                children: [_jsx(\"input\", {\n                  id: Propertylist.Slab.name,\n                  placeholder: Propertylist.Slab.placeholder,\n                  onChange: (function () {\n                    var _ref15 = _asyncToGenerator(function* (e) {\n                      return yield ConvertToBase64(index, Propertylist.Slab.name, e);\n                    });\n                    return function (_x9) {\n                      return _ref15.apply(this, arguments);\n                    };\n                  }()),\n                  type: Propertylist.Slab.type,\n                  style: Propertylist.Slab.style\n                }), value && Propertylist.Slab.type === SchemaTypes.file && _jsx(ModallImageView, {\n                  src: value.value,\n                  title: value.fileName\n                })]\n              });\n            })), _jsx(Button, {\n              title: \"Add\",\n              onPress: function onPress() {\n                dispatch({\n                  type: ADD_ARRAY,\n                  payload: {\n                    name: Propertylist.Slab.name\n                  }\n                });\n              }\n            })]\n          }), _jsx(Divider, {}), _jsx(Text, {\n            style: CommonClass.sectionTitle,\n            children: \"Section 6\"\n          }), Section6.map(function (element) {\n            var value = undefined;\n            if (element.type !== SchemaTypes.file) {\n              value = state[element.name] ? state[element.name] : \"\";\n            }\n            return _jsxs(_Fragment, {\n              children: [_jsx(\"label\", {\n                for: element.name,\n                style: {\n                  marginTop: 0\n                },\n                children: element.placeholder\n              }), _jsx(\"input\", {\n                id: element.name,\n                placeholder: element.placeholder,\n                value: value,\n                onChange: function onChange(e) {\n                  return Onchange(e, element);\n                },\n                type: element.type,\n                style: element.style\n              }), state[element.name] && element.type === SchemaTypes.file && _jsx(ModallImageView, {\n                title: state[element.name].fileName,\n                src: state[element.name].value\n              })]\n            });\n          }), _jsx(Button, {\n            title: \"Submit\",\n            onPress: function onPress() {\n              return mutate();\n            }\n          })]\n        }), _jsx(Button, {\n          disabled: isPending,\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        })]\n      })\n    })\n  });\n};","map":{"version":3,"names":["React","useReducer","useState","Modal","View","Button","Text","ScrollView","JPG_CONTENT_TYPE","PNG_CONTENT_TYPE","Propertylist","SchemaTypes","Section1","Section4","Section5","Section6","blobToBase64","deepCopyObject","dataview","ModallImageView","Divider","CommonClass","useMutation","useQueryClient","LoadingSpinner","UPDATE_ON_ACCOUNT","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ADD_PROPS_TYPE","REMOVE_PROPS_TYPE","ADD_ARRAY","UPDATE_PROP_VALUES","reducer","state","action","_action$payload","currentState","type","payload","name","_toConsumableArray","data","undefined","ContentType","value","fileName","push","index","ProjectModal","_ref","_Object$entries","_Object$entries2","_Object$entries3","_Object$entries4","_ref$init","init","onSubmit","modalVisible","setModalVisible","_useReducer","_useReducer2","_slicedToArray","dispatch","queryClient","ConvertToBase64","_ref2","_asyncToGenerator","e","_e$target$files$","_e$target$files$2","target","files","_x","_x2","_x3","apply","arguments","Onchange","_ref3","element","file","_e$target$files$3","_e$target$files$4","_x4","_x5","_useMutation","mutationFn","_mutationFn","onSuccess","invalidateQueries","predicate","query","queryKey","includes","isSuccess","isPending","error","mutate","stausClass","position","top","width","backgroundColor","padding","borderRadius","animationType","transparent","visible","onRequestClose","children","style","flex","justifyContent","alignItems","height","size","map","for","marginTop","placeholder","id","onChange","sectionTitle","PresentationDraw","Object","entries","_ref4","_ref5","key","_ref6","_x6","src","title","onPress","FileModel3D","_ref7","_ref8","_ref9","_x7","RCCDrawing1","_ref10","_ref11","_ref12","_x8","Slab","_ref13","_ref14","fileContainer","_ref15","_x9","disabled"],"sources":["D:/Logingfg - Copy/src/GenericComponent/ProjectModal.js"],"sourcesContent":["import React, { useReducer, useState } from 'react';\r\nimport { Modal, View, Button, Text, ScrollView } from 'react-native';\r\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5, Section6 } from '../helper/extrapropertise';\r\nimport { blobToBase64, deepCopyObject } from '../helper/helper';\r\nimport { dataview } from '../styles/Dataview';\r\nimport ModallImageView from '../screens/ModalImageView';\r\nimport { Divider } from 'react-native-paper';\r\nimport { CommonClass } from '../styles/Commonclass';\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport LoadingSpinner from './LoadingSpinneer';\r\nimport { UPDATE_ON_ACCOUNT } from '../Endpoints/endpoints';\r\n\r\nconst ADD_PROPS_TYPE = \"Add_Property\";\r\nconst REMOVE_PROPS_TYPE = \"Remove_Property\";\r\nconst ADD_ARRAY = \"push\"\r\nconst UPDATE_PROP_VALUES = \"update\"\r\n\r\nconst reducer = (state, action) => {\r\n    var currentState = deepCopyObject(state);\r\n    if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\r\n        currentState[action.payload.name] = [...state[action.payload.name]]\r\n    }\r\n    switch (action.type) {\r\n        case ADD_PROPS_TYPE:\r\n            let data = undefined\r\n            if (action.payload?.ContentType) {\r\n                data = { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName }\r\n            } else {\r\n                data = action.payload.value\r\n            }\r\n            currentState[action.payload.name] = data;\r\n            break;\r\n        case ADD_ARRAY:\r\n            if (!currentState[action.payload.name]) {\r\n\r\n                currentState[action.payload.name] = []\r\n            }\r\n            currentState[action.payload.name].push({})\r\n            break;\r\n        case UPDATE_PROP_VALUES:\r\n            currentState[action.payload.name][action.payload.index] =\r\n                { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName };\r\n            break\r\n        case REMOVE_PROPS_TYPE:\r\n            delete currentState[action.payload];\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return currentState;\r\n};\r\n\r\n\r\nexport const ProjectModal = ({ init = {}, onSubmit, modalVisible, setModalVisible }) => {\r\n    const [state, dispatch] = useReducer(reducer, init);\r\n    const queryClient = useQueryClient();\r\n    const ConvertToBase64 = async (index, name, e) => {\r\n        let data = await blobToBase64(e.target.files[0])\r\n        dispatch({\r\n            type: UPDATE_PROP_VALUES, payload:\r\n                { ContentType: e.target.files[0]?.type, index: index, name: name, value: data, fileName: e.target.files[0]?.name }\r\n        })\r\n    }\r\n    const Onchange = async (e, element) => {\r\n        if (element.type === SchemaTypes.file) {\r\n            let data = await blobToBase64(e.target.files[0])\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { fileName: e.target.files[0]?.name, name: element.name, value: data, ContentType: e.target.files[0]?.type } })\r\n        } else {\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { name: element.name, value: e.target.value } })\r\n        }\r\n    }\r\n\r\n    const { isSuccess, isPending, error, mutate } = useMutation({\r\n        mutationFn: async () => await onSubmit(state),\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries({\r\n                predicate: (query) =>\r\n                    query.queryKey.includes(UPDATE_ON_ACCOUNT)\r\n            })\r\n        },\r\n\r\n    })\r\n\r\n    var stausClass = (isPending || isSuccess) ? {\r\n        position: 'relative', top: '50%', width: '80%', backgroundColor: 'white', padding: 20, borderRadius: 10\r\n    } : { backgroundColor: 'white', padding: 20, borderRadius: 10 }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            animationType=\"slide\"\r\n            transparent={true}\r\n            visible={modalVisible}\r\n            onRequestClose={() => setModalVisible(false)}\r\n        >\r\n\r\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)', height: 'auto' }}>\r\n                <ScrollView style={stausClass}>\r\n                    {\r\n                        isPending ?\r\n                            <View>\r\n                                <LoadingSpinner size='large' />\r\n                            </View >\r\n                            : error ? (<View>\r\n                                {error}\r\n                            </View>)\r\n                                : isSuccess ?\r\n                                    (<View>\r\n                                        Added or Updated Successfully !!\r\n                                    </View>)\r\n                                    :\r\n                                    <View>\r\n                                        <Text>Section 1: Client Basic Details</Text>\r\n                                        {\r\n                                            Section1.map(element => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={(state[element.name]) ? state[element.name] : \"\"}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        />\r\n                                                    </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 2:Add Presentation Drawing</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.PresentationDraw.name] && Object.entries(state[Propertylist.PresentationDraw.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View >\r\n                                                            <input\r\n                                                                id={Propertylist.PresentationDraw.name}\r\n                                                                placeholder={Propertylist.PresentationDraw.placeholder}\r\n                                                                // value={element}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.PresentationDraw.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.PresentationDraw.type}\r\n                                                                style={Propertylist.PresentationDraw.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.PresentationDraw.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            }\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.PresentationDraw.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 3: Add 3d Models</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.FileModel3D.name] && Object.entries(state[Propertylist.FileModel3D.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View >\r\n                                                            <input\r\n                                                                id={Propertylist.FileModel3D.name}\r\n                                                                placeholder={Propertylist.FileModel3D.placeholder}\r\n                                                                // value={element}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.FileModel3D.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.FileModel3D.type}\r\n                                                                style={Propertylist.FileModel3D.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.FileModel3D.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            }\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.FileModel3D.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 4</Text>\r\n                                        {\r\n                                            Section4.map(element => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={state[element.name] ? state[element.name] : \"\"}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        />\r\n                                                    </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 5: Add RCC Drawing</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.RCCDrawing1.name] && Object.entries(state[Propertylist.RCCDrawing1.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View >\r\n                                                            <input\r\n                                                                id={Propertylist.RCCDrawing1.name}\r\n                                                                placeholder={Propertylist.RCCDrawing1.placeholder}\r\n                                                                // value={element}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.RCCDrawing1.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.RCCDrawing1.type}\r\n                                                                style={Propertylist.RCCDrawing1.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.RCCDrawing1.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            }\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.RCCDrawing1.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 5</Text>\r\n                                        {\r\n                                            Section5.map(element => {\r\n                                                let value = undefined\r\n                                                if (element.type !== SchemaTypes.file) {\r\n                                                    value = state[element.name] ? state[element.name] : \"\"\r\n                                                }\r\n                                                return (\r\n                                                    <>\r\n                                                        <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={value}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        />\r\n                                                        {\r\n                                                            (state[element.name] && element.type === SchemaTypes.file)\r\n                                                            &&\r\n                                                            <ModallImageView\r\n                                                                title={state[element.name].fileName}\r\n                                                                src={state[element.name].value}\r\n                                                            />\r\n                                                        }\r\n                                                    </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 5:Add Slab files</Text>\r\n                                        <View>\r\n                                            {\r\n                                                state?.[Propertylist.Slab.name] && Object.entries(state[Propertylist.Slab.name])?.map(([key, value], index) => {\r\n                                                    return (\r\n                                                        <View style={dataview.fileContainer}>\r\n                                                            <input\r\n                                                                id={Propertylist.Slab.name}\r\n                                                                placeholder={Propertylist.Slab.placeholder}\r\n                                                                // value={value}\r\n                                                                onChange={async (e) =>\r\n                                                                    await ConvertToBase64(index, Propertylist.Slab.name, e)\r\n                                                                }\r\n                                                                type={Propertylist.Slab.type}\r\n                                                                style={Propertylist.Slab.style}\r\n                                                            />\r\n                                                            {\r\n                                                                (value && Propertylist.Slab.type === SchemaTypes.file)\r\n                                                                &&\r\n                                                                <ModallImageView\r\n                                                                    src={value.value}\r\n                                                                    title={value.fileName}\r\n                                                                />\r\n                                                            }\r\n                                                        </View>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <Button title=\"Add\" onPress={() => {\r\n                                                dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.Slab.name } })\r\n                                            }} />\r\n                                        </View>\r\n                                        <Divider />\r\n                                        <Text style={CommonClass.sectionTitle}>Section 6</Text>\r\n                                        {\r\n                                            Section6.map(element => {\r\n                                                let value = undefined\r\n                                                if (element.type !== SchemaTypes.file) {\r\n                                                    value = state[element.name] ? state[element.name] : \"\"\r\n                                                }\r\n                                                return (\r\n                                                    <>\r\n                                                        <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                                        <input\r\n                                                            id={element.name}\r\n                                                            placeholder={element.placeholder}\r\n                                                            value={value}\r\n                                                            onChange={(e) =>\r\n                                                                Onchange(e, element)\r\n                                                            }\r\n                                                            type={element.type}\r\n                                                            style={element.style}\r\n                                                        />\r\n                                                        {\r\n                                                            (state[element.name] && element.type === SchemaTypes.file)\r\n                                                            &&\r\n                                                            <ModallImageView\r\n                                                                title={state[element.name].fileName}\r\n                                                                src={state[element.name].value}\r\n                                                            />\r\n                                                        }\r\n                                                    </>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                        <Button title=\"Submit\" onPress={() => mutate()} />\r\n                                    </View>\r\n\r\n                    }\r\n                    <Button disabled={isPending} title=\"Close\" onPress={() => setModalVisible(false)} />\r\n                </ScrollView>\r\n            </View>\r\n        </Modal>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}