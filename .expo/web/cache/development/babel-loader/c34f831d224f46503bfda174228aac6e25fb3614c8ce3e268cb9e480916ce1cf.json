{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useReducer, useState } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5 } from \"../helper/extrapropertise\";\nimport { blobToBase64, deepCopyObject } from \"../helper/helper\";\nimport { dataview } from \"../styles/Dataview\";\nimport ModallImageView from \"../screens/ModalImageView\";\nimport { Divider } from 'react-native-paper';\nimport { CommonClass } from \"../styles/Commonclass\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ADD_PROPS_TYPE = \"Add_Property\";\nvar REMOVE_PROPS_TYPE = \"Remove_Property\";\nvar ADD_ARRAY = \"push\";\nvar UPDATE_PROP_VALUES = \"update\";\nvar reducer = function reducer(state, action) {\n  var _action$payload;\n  var currentState = deepCopyObject(state);\n  if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\n    currentState[action.payload.name] = _toConsumableArray(state[action.payload.name]);\n  }\n  switch (action.type) {\n    case ADD_PROPS_TYPE:\n      var data = undefined;\n      if ((_action$payload = action.payload) != null && _action$payload.ContentType) {\n        data = {\n          value: action.payload.value,\n          ContentType: action.payload.ContentType,\n          fileName: action.payload.fileName\n        };\n      } else {\n        data = action.payload.value;\n      }\n      currentState[action.payload.name] = data;\n      break;\n    case ADD_ARRAY:\n      if (!currentState[action.payload.name]) {\n        currentState[action.payload.name] = [];\n      }\n      currentState[action.payload.name].push({});\n      break;\n    case UPDATE_PROP_VALUES:\n      currentState[action.payload.name][action.payload.index] = {\n        value: action.payload.value,\n        ContentType: action.payload.ContentType,\n        fileName: action.payload.fileName\n      };\n      break;\n    case REMOVE_PROPS_TYPE:\n      delete currentState[action.payload];\n      break;\n    default:\n  }\n  return currentState;\n};\nexport var ProjectModal = function ProjectModal(_ref) {\n  var _route$params, _Object$entries, _Object$entries2, _Object$entries3, _Object$entries4;\n  var route = _ref.route,\n    _ref$init = _ref.init,\n    init = _ref$init === void 0 ? {} : _ref$init,\n    onSubmit = _ref.onSubmit;\n  var initialise = init;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  console.log(state);\n  var data = route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.data;\n  if (data) {\n    initialise = data;\n  }\n  var _useReducer = useReducer(reducer, initialise),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  var ConvertToBase64 = function () {\n    var _ref2 = _asyncToGenerator(function* (index, name, e) {\n      var _e$target$files$, _e$target$files$2, _e$target$files$3;\n      var data = yield blobToBase64(e.target.files[0]);\n      console.log((_e$target$files$ = e.target.files[0]) == null ? void 0 : _e$target$files$.type);\n      dispatch({\n        type: UPDATE_PROP_VALUES,\n        payload: {\n          ContentType: (_e$target$files$2 = e.target.files[0]) == null ? void 0 : _e$target$files$2.type,\n          index: index,\n          name: name,\n          value: data,\n          fileName: (_e$target$files$3 = e.target.files[0]) == null ? void 0 : _e$target$files$3.name\n        }\n      });\n    });\n    return function ConvertToBase64(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var Onchange = function () {\n    var _ref3 = _asyncToGenerator(function* (e, element) {\n      if (element.type === SchemaTypes.file) {\n        var _e$target$files$4, _e$target$files$5;\n        var _data = yield blobToBase64(e.target.files[0]);\n        console.log(e.target.files[0]);\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            fileName: (_e$target$files$4 = e.target.files[0]) == null ? void 0 : _e$target$files$4.name,\n            name: element.name,\n            value: _data,\n            ContentType: (_e$target$files$5 = e.target.files[0]) == null ? void 0 : _e$target$files$5.type\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_PROPS_TYPE,\n          payload: {\n            name: element.name,\n            value: e.target.value\n          }\n        });\n      }\n    });\n    return function Onchange(_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  console.log(state);\n  return _jsx(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: true,\n    onRequestClose: function onRequestClose() {\n      return setModalVisible(false);\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        height: 'auto'\n      },\n      children: _jsxs(ScrollView, {\n        style: {\n          backgroundColor: 'white',\n          padding: 20,\n          borderRadius: 10\n        },\n        children: [_jsx(Text, {\n          children: \"Section 1: Client Basic Details\"\n        }), Section1.map(function (element) {\n          return _jsxs(_Fragment, {\n            children: [_jsx(\"label\", {\n              for: element.name,\n              style: {\n                marginTop: 0\n              },\n              children: element.placeholder\n            }), _jsx(\"input\", {\n              id: element.name,\n              placeholder: element.placeholder,\n              value: state[element.name] ? state[element.name] : \"\",\n              onChange: function onChange(e) {\n                return Onchange(e, element);\n              },\n              type: element.type,\n              style: element.style\n            })]\n          });\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 2:Add Presentation Drawing\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.PresentationDraw.name]) && ((_Object$entries = Object.entries(state[Propertylist.PresentationDraw.name])) == null ? void 0 : _Object$entries.map(function (_ref4, index) {\n            var _ref5 = _slicedToArray(_ref4, 2),\n              key = _ref5[0],\n              value = _ref5[1];\n            return _jsxs(View, {\n              children: [_jsx(\"input\", {\n                id: Propertylist.PresentationDraw.name,\n                placeholder: Propertylist.PresentationDraw.placeholder,\n                onChange: (function () {\n                  var _ref6 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.PresentationDraw.name, e);\n                  });\n                  return function (_x6) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.PresentationDraw.type,\n                style: Propertylist.PresentationDraw.style\n              }), value && Propertylist.PresentationDraw.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.PresentationDraw.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 3: Add 3d Models\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.FileModel3D.name]) && ((_Object$entries2 = Object.entries(state[Propertylist.FileModel3D.name])) == null ? void 0 : _Object$entries2.map(function (_ref7, index) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              key = _ref8[0],\n              value = _ref8[1];\n            return _jsxs(View, {\n              children: [_jsx(\"input\", {\n                id: Propertylist.FileModel3D.name,\n                placeholder: Propertylist.FileModel3D.placeholder,\n                onChange: (function () {\n                  var _ref9 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.FileModel3D.name, e);\n                  });\n                  return function (_x7) {\n                    return _ref9.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.FileModel3D.type,\n                style: Propertylist.FileModel3D.style\n              }), value && Propertylist.FileModel3D.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.FileModel3D.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 4\"\n        }), Section4.map(function (element) {\n          return _jsxs(_Fragment, {\n            children: [_jsx(\"label\", {\n              for: element.name,\n              style: {\n                marginTop: 0\n              },\n              children: element.placeholder\n            }), _jsx(\"input\", {\n              id: element.name,\n              placeholder: element.placeholder,\n              value: state[element.name] ? state[element.name] : \"\",\n              onChange: function onChange(e) {\n                return Onchange(e, element);\n              },\n              type: element.type,\n              style: element.style\n            })]\n          });\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 5: Add RCC Drawing\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.RCCDrawing1.name]) && ((_Object$entries3 = Object.entries(state[Propertylist.RCCDrawing1.name])) == null ? void 0 : _Object$entries3.map(function (_ref10, index) {\n            var _ref11 = _slicedToArray(_ref10, 2),\n              key = _ref11[0],\n              value = _ref11[1];\n            return _jsxs(View, {\n              children: [_jsx(\"input\", {\n                id: Propertylist.RCCDrawing1.name,\n                placeholder: Propertylist.RCCDrawing1.placeholder,\n                onChange: (function () {\n                  var _ref12 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.RCCDrawing1.name, e);\n                  });\n                  return function (_x8) {\n                    return _ref12.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.RCCDrawing1.type,\n                style: Propertylist.RCCDrawing1.style\n              }), value && Propertylist.RCCDrawing1.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.RCCDrawing1.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 5\"\n        }), Section5.map(function (element) {\n          var value = undefined;\n          if (element.type !== SchemaTypes.file) {\n            value = state[element.name] ? state[element.name] : \"\";\n          } else {\n            console.log(state[element.name]);\n          }\n          return _jsxs(_Fragment, {\n            children: [_jsx(\"label\", {\n              for: element.name,\n              style: {\n                marginTop: 0\n              },\n              children: element.placeholder\n            }), _jsx(\"input\", {\n              id: element.name,\n              placeholder: element.placeholder,\n              value: value,\n              onChange: function onChange(e) {\n                return Onchange(e, element);\n              },\n              type: element.type,\n              style: element.style\n            }), state[element.name] && element.type === SchemaTypes.file && _jsx(ModallImageView, {\n              title: state[element.name].fileName,\n              src: state[element.name].value\n            })]\n          });\n        }), _jsx(Divider, {}), _jsx(Text, {\n          style: CommonClass.sectionTitle,\n          children: \"Section 5:Add Slab files\"\n        }), _jsxs(View, {\n          children: [(state == null ? void 0 : state[Propertylist.Slab.name]) && ((_Object$entries4 = Object.entries(state[Propertylist.Slab.name])) == null ? void 0 : _Object$entries4.map(function (_ref13, index) {\n            var _ref14 = _slicedToArray(_ref13, 2),\n              key = _ref14[0],\n              value = _ref14[1];\n            return _jsxs(View, {\n              style: dataview.fileContainer,\n              children: [_jsx(\"input\", {\n                id: Propertylist.Slab.name,\n                placeholder: Propertylist.Slab.placeholder,\n                onChange: (function () {\n                  var _ref15 = _asyncToGenerator(function* (e) {\n                    return yield ConvertToBase64(index, Propertylist.Slab.name, e);\n                  });\n                  return function (_x9) {\n                    return _ref15.apply(this, arguments);\n                  };\n                }()),\n                type: Propertylist.Slab.type,\n                style: Propertylist.Slab.style\n              }), value && Propertylist.Slab.type === SchemaTypes.file && _jsx(ModallImageView, {\n                src: value.value,\n                title: value.fileName\n              })]\n            });\n          })), _jsx(Button, {\n            title: \"Add\",\n            onPress: function onPress() {\n              dispatch({\n                type: ADD_ARRAY,\n                payload: {\n                  name: Propertylist.Slab.name\n                }\n              });\n            }\n          })]\n        }), _jsx(Button, {\n          title: \"Submit\",\n          onPress: function onPress() {\n            return onSubmit();\n          }\n        }), _jsx(Button, {\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        })]\n      })\n    })\n  });\n};","map":{"version":3,"names":["React","useReducer","useState","Modal","View","Button","Text","ScrollView","JPG_CONTENT_TYPE","PNG_CONTENT_TYPE","Propertylist","SchemaTypes","Section1","Section4","Section5","blobToBase64","deepCopyObject","dataview","ModallImageView","Divider","CommonClass","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ADD_PROPS_TYPE","REMOVE_PROPS_TYPE","ADD_ARRAY","UPDATE_PROP_VALUES","reducer","state","action","_action$payload","currentState","type","payload","name","_toConsumableArray","data","undefined","ContentType","value","fileName","push","index","ProjectModal","_ref","_route$params","_Object$entries","_Object$entries2","_Object$entries3","_Object$entries4","route","_ref$init","init","onSubmit","initialise","_useState","_useState2","_slicedToArray","modalVisible","setModalVisible","console","log","params","_useReducer","_useReducer2","dispatch","ConvertToBase64","_ref2","_asyncToGenerator","e","_e$target$files$","_e$target$files$2","_e$target$files$3","target","files","_x","_x2","_x3","apply","arguments","Onchange","_ref3","element","file","_e$target$files$4","_e$target$files$5","_x4","_x5","animationType","transparent","visible","onRequestClose","children","style","flex","justifyContent","alignItems","backgroundColor","height","padding","borderRadius","map","for","marginTop","placeholder","id","onChange","sectionTitle","PresentationDraw","Object","entries","_ref4","_ref5","key","_ref6","_x6","src","title","onPress","FileModel3D","_ref7","_ref8","_ref9","_x7","RCCDrawing1","_ref10","_ref11","_ref12","_x8","Slab","_ref13","_ref14","fileContainer","_ref15","_x9"],"sources":["D:/Logingfg - Copy/src/GenericComponent/ProjectModal.js"],"sourcesContent":["import React, { useReducer, useState } from 'react';\r\nimport { Modal, View, Button, Text, ScrollView } from 'react-native';\r\nimport { JPG_CONTENT_TYPE, PNG_CONTENT_TYPE, Propertylist, SchemaTypes, Section1, Section4, Section5 } from '../helper/extrapropertise';\r\nimport { blobToBase64, deepCopyObject } from '../helper/helper';\r\nimport { dataview } from '../styles/Dataview';\r\nimport ModallImageView from '../screens/ModalImageView';\r\nimport { Divider } from 'react-native-paper';\r\nimport { CommonClass } from '../styles/Commonclass';\r\n\r\nconst ADD_PROPS_TYPE = \"Add_Property\";\r\nconst REMOVE_PROPS_TYPE = \"Remove_Property\";\r\nconst ADD_ARRAY = \"push\"\r\nconst UPDATE_PROP_VALUES = \"update\"\r\n\r\nconst reducer = (state, action) => {\r\n    var currentState = deepCopyObject(state);\r\n    if ((action.type === ADD_ARRAY || action.type === UPDATE_PROP_VALUES) && state[action.payload.name]) {\r\n        currentState[action.payload.name] = [...state[action.payload.name]]\r\n    }\r\n    switch (action.type) {\r\n        case ADD_PROPS_TYPE:\r\n            let data = undefined\r\n            if (action.payload?.ContentType) {\r\n                data = { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName }\r\n            } else {\r\n                data = action.payload.value\r\n            }\r\n            currentState[action.payload.name] = data;\r\n            break;\r\n        case ADD_ARRAY:\r\n            if (!currentState[action.payload.name]) {\r\n\r\n                currentState[action.payload.name] = []\r\n            }\r\n            currentState[action.payload.name].push({})\r\n            break;\r\n        case UPDATE_PROP_VALUES:\r\n            currentState[action.payload.name][action.payload.index] =\r\n                { value: action.payload.value, ContentType: action.payload.ContentType, fileName: action.payload.fileName };\r\n            break\r\n        case REMOVE_PROPS_TYPE:\r\n            delete currentState[action.payload];\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return currentState;\r\n};\r\n\r\n\r\nexport const ProjectModal = ({ route, init = {}, onSubmit }) => {\r\n    let initialise = init;\r\n    const [modalVisible, setModalVisible] = useState(true);\r\n    console.log(state);\r\n    const data = route?.params?.data;\r\n    if (data) {\r\n        initialise = data;\r\n    }\r\n    const [state, dispatch] = useReducer(reducer, initialise);\r\n\r\n    const ConvertToBase64 = async (index, name, e) => {\r\n        let data = await blobToBase64(e.target.files[0])\r\n        console.log(e.target.files[0]?.type);\r\n        dispatch({\r\n            type: UPDATE_PROP_VALUES, payload:\r\n                { ContentType: e.target.files[0]?.type, index: index, name: name, value: data, fileName: e.target.files[0]?.name }\r\n        })\r\n    }\r\n    const Onchange = async (e, element) => {\r\n        if (element.type === SchemaTypes.file) {\r\n            let data = await blobToBase64(e.target.files[0])\r\n            console.log(e.target.files[0]);\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { fileName: e.target.files[0]?.name, name: element.name, value: data, ContentType: e.target.files[0]?.type } })\r\n        } else {\r\n            dispatch({ type: ADD_PROPS_TYPE, payload: { name: element.name, value: e.target.value } })\r\n        }\r\n    }\r\n    console.log(state);\r\n    return (\r\n        <Modal\r\n            animationType=\"slide\"\r\n            transparent={true}\r\n            visible={true}\r\n            onRequestClose={() => setModalVisible(false)}\r\n        >\r\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)', height: 'auto' }}>\r\n                <ScrollView style={{ backgroundColor: 'white', padding: 20, borderRadius: 10 }}>\r\n                    <Text>Section 1: Client Basic Details</Text>\r\n                    {\r\n                        Section1.map(element => {\r\n                            return (\r\n                                <>\r\n                                    <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                    <input\r\n                                        id={element.name}\r\n                                        placeholder={element.placeholder}\r\n                                        value={(state[element.name]) ? state[element.name] : \"\"}\r\n                                        onChange={(e) =>\r\n                                            Onchange(e, element)\r\n                                        }\r\n                                        type={element.type}\r\n                                        style={element.style}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 2:Add Presentation Drawing</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.PresentationDraw.name] && Object.entries(state[Propertylist.PresentationDraw.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View >\r\n                                        <input\r\n                                            id={Propertylist.PresentationDraw.name}\r\n                                            placeholder={Propertylist.PresentationDraw.placeholder}\r\n                                            // value={element}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.PresentationDraw.name, e)\r\n                                            }\r\n                                            type={Propertylist.PresentationDraw.type}\r\n                                            style={Propertylist.PresentationDraw.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.PresentationDraw.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.PresentationDraw.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 3: Add 3d Models</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.FileModel3D.name] && Object.entries(state[Propertylist.FileModel3D.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View >\r\n                                        <input\r\n                                            id={Propertylist.FileModel3D.name}\r\n                                            placeholder={Propertylist.FileModel3D.placeholder}\r\n                                            // value={element}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.FileModel3D.name, e)\r\n                                            }\r\n                                            type={Propertylist.FileModel3D.type}\r\n                                            style={Propertylist.FileModel3D.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.FileModel3D.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.FileModel3D.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 4</Text>\r\n                    {\r\n                        Section4.map(element => {\r\n                            return (\r\n                                <>\r\n                                    <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                    <input\r\n                                        id={element.name}\r\n                                        placeholder={element.placeholder}\r\n                                        value={state[element.name] ? state[element.name] : \"\"}\r\n                                        onChange={(e) =>\r\n                                            Onchange(e, element)\r\n                                        }\r\n                                        type={element.type}\r\n                                        style={element.style}\r\n                                    />\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 5: Add RCC Drawing</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.RCCDrawing1.name] && Object.entries(state[Propertylist.RCCDrawing1.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View >\r\n                                        <input\r\n                                            id={Propertylist.RCCDrawing1.name}\r\n                                            placeholder={Propertylist.RCCDrawing1.placeholder}\r\n                                            // value={element}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.RCCDrawing1.name, e)\r\n                                            }\r\n                                            type={Propertylist.RCCDrawing1.type}\r\n                                            style={Propertylist.RCCDrawing1.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.RCCDrawing1.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.RCCDrawing1.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 5</Text>\r\n                    {\r\n                        Section5.map(element => {\r\n                            let value = undefined\r\n                            if (element.type !== SchemaTypes.file) {\r\n                                value = state[element.name] ? state[element.name] : \"\"\r\n                            } else {\r\n                                console.log(state[element.name]);\r\n                            }\r\n                            return (\r\n                                <>\r\n                                    <label for={element.name} style={{ marginTop: 0 }}>{element.placeholder}</label>\r\n                                    <input\r\n                                        id={element.name}\r\n                                        placeholder={element.placeholder}\r\n                                        value={value}\r\n                                        onChange={(e) =>\r\n                                            Onchange(e, element)\r\n                                        }\r\n                                        type={element.type}\r\n                                        style={element.style}\r\n                                    />\r\n                                    {\r\n                                        (state[element.name] && element.type === SchemaTypes.file)\r\n                                        &&\r\n                                        <ModallImageView\r\n                                            title={state[element.name].fileName}\r\n                                            src={state[element.name].value}\r\n                                        />\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    <Divider />\r\n                    <Text style={CommonClass.sectionTitle}>Section 5:Add Slab files</Text>\r\n                    <View>\r\n                        {\r\n                            state?.[Propertylist.Slab.name] && Object.entries(state[Propertylist.Slab.name])?.map(([key, value], index) => {\r\n                                return (\r\n                                    <View style={dataview.fileContainer}>\r\n                                        <input\r\n                                            id={Propertylist.Slab.name}\r\n                                            placeholder={Propertylist.Slab.placeholder}\r\n                                            // value={value}\r\n                                            onChange={async (e) =>\r\n                                                await ConvertToBase64(index, Propertylist.Slab.name, e)\r\n                                            }\r\n                                            type={Propertylist.Slab.type}\r\n                                            style={Propertylist.Slab.style}\r\n                                        />\r\n                                        {\r\n                                            (value && Propertylist.Slab.type === SchemaTypes.file)\r\n                                            &&\r\n                                            <ModallImageView\r\n                                                src={value.value}\r\n                                                title={value.fileName}\r\n                                            />\r\n                                        }\r\n                                    </View>\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button title=\"Add\" onPress={() => {\r\n                            dispatch({ type: ADD_ARRAY, payload: { name: Propertylist.Slab.name } })\r\n                        }} />\r\n                    </View>\r\n                    <Button title=\"Submit\" onPress={() => onSubmit()} />\r\n                    <Button title=\"Close\" onPress={() => setModalVisible(false)} />\r\n                </ScrollView>\r\n            </View>\r\n        </Modal>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}