{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Button, Card, Text } from \"react-native-paper\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { dataview } from \"../styles/Dataview\";\nimport { JPG_CONTENT_TYPE, NODATA, PNG_CONTENT_TYPE } from \"../helper/extrapropertise\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { CommonClass } from \"../styles/Commonclass\";\nimport { createAssetAsync, createAlbumAsync } from 'expo-media-library';\nimport { writeAsStringAsync, documentDirectory, EncodingType } from 'expo-file-system';\nimport { useState } from \"react\";\nimport LoadingSpinner from \"./LoadingSpinneer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var FileCard = function FileCard(_ref) {\n  var item = _ref.item;\n  var _useState = useState({\n      isloading: false,\n      done: false,\n      error: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    done = _useState2[0],\n    setDone = _useState2[1];\n  var DowloadFile = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setDone({\n          isloading: true,\n          done: false,\n          error: false\n        });\n        var fileUri = documentDirectory + item.fileName;\n        console.log(fileUri);\n        yield writeAsStringAsync(fileUri, item == null ? void 0 : item.value, {\n          encoding: EncodingType.Base64\n        });\n        var asset = yield createAssetAsync(fileUri);\n        yield createAlbumAsync(\"Download\", asset, false);\n        setDone({\n          isloading: false,\n          done: true,\n          error: false\n        });\n      } catch (e) {\n        console.log(e);\n        setDone({\n          isloading: false,\n          done: false,\n          error: true\n        });\n      }\n    });\n    return function DowloadFile() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(Card, {\n    children: _jsxs(Card.Content, {\n      children: [_jsx(Text, {\n        variant: \"bodyMedium\",\n        style: CommonClass.TextWrap,\n        children: item.fileName || \"Show File\"\n      }), _jsxs(View, {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-evenly'\n        },\n        children: [_jsxs(View, {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-evenly'\n          },\n          children: [_jsx(Image, {\n            style: dataview.img,\n            source: {\n              uri: 'data:image/png;base64,' + (item == null ? void 0 : item.value)\n            }\n          }), done.isloading ? _jsx(View, {\n            children: _jsx(LoadingSpinner, {\n              size: \"large\"\n            })\n          }) : _jsx(TouchableOpacity, {\n            style: CommonClass.Downloadbutton,\n            onPress: _asyncToGenerator(function* () {\n              return yield DowloadFile();\n            }),\n            children: _jsx(AntDesign, {\n              name: \"download\",\n              size: 24,\n              color: \"black\"\n            })\n          })]\n        }), done.error && _jsx(View, {\n          style: CommonClass.chooseFile,\n          children: _jsx(Text, {\n            children: \"Something Went Wrong\"\n          })\n        }), done.done && _jsx(View, {\n          style: CommonClass.chooseFile,\n          children: _jsx(Text, {\n            children: \"Downloaded Successfully !!\"\n          })\n        })]\n      })]\n    })\n  });\n};","map":{"version":3,"names":["Button","Card","Text","Image","TouchableOpacity","View","dataview","JPG_CONTENT_TYPE","NODATA","PNG_CONTENT_TYPE","AntDesign","CommonClass","createAssetAsync","createAlbumAsync","writeAsStringAsync","documentDirectory","EncodingType","useState","LoadingSpinner","jsx","_jsx","jsxs","_jsxs","FileCard","_ref","item","_useState","isloading","done","error","_useState2","_slicedToArray","setDone","DowloadFile","_ref2","_asyncToGenerator","fileUri","fileName","console","log","value","encoding","Base64","asset","e","apply","arguments","children","Content","variant","style","TextWrap","display","flexDirection","justifyContent","img","source","uri","size","Downloadbutton","onPress","name","color","chooseFile"],"sources":["D:/ReactNativeApplication/TestApp/src/GenericComponent/FileCard.js"],"sourcesContent":["import { Button, Card, Text } from \"react-native-paper\";\r\nimport { Image, TouchableOpacity, View } from \"react-native\"\r\nimport { dataview } from \"../styles/Dataview\";\r\nimport { JPG_CONTENT_TYPE, NODATA, PNG_CONTENT_TYPE } from \"../helper/extrapropertise\";\r\nimport { AntDesign } from '@expo/vector-icons';\r\nimport { CommonClass } from \"../styles/Commonclass\";\r\nimport { createAssetAsync, createAlbumAsync } from 'expo-media-library';\r\nimport { writeAsStringAsync, documentDirectory, EncodingType } from 'expo-file-system';\r\nimport { useState } from \"react\";\r\nimport LoadingSpinner from \"./LoadingSpinneer\";\r\n\r\nexport const FileCard = ({ item }) => {\r\n    const [done, setDone] = useState({\r\n        isloading: false,\r\n        done: false,\r\n        error: false\r\n    });\r\n    const DowloadFile = async () => {\r\n        try {\r\n            setDone({\r\n                isloading: true,\r\n                done: false,\r\n                error: false\r\n            })\r\n            let fileUri = documentDirectory + item.fileName;\r\n            console.log(fileUri);\r\n            await writeAsStringAsync(fileUri, item?.value, { encoding: EncodingType.Base64 });\r\n            const asset = await createAssetAsync(fileUri)\r\n            await createAlbumAsync(\"Download\", asset, false)\r\n            setDone({\r\n                isloading: false,\r\n                done: true,\r\n                error: false\r\n            })\r\n        } catch (e) {\r\n            console.log(e);\r\n            setDone({\r\n                isloading: false,\r\n                done: false,\r\n                error: true\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Card>\r\n            <Card.Content>\r\n                <Text variant=\"bodyMedium\" style={CommonClass.TextWrap}>{item.fileName || \"Show File\"}</Text>\r\n                {\r\n\r\n                    <View style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-evenly' }}>\r\n                        <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-evenly' }}>\r\n                            <Image\r\n                                style={dataview.img}\r\n                                source={{\r\n                                    uri: 'data:image/png;base64,' + item?.value,\r\n                                }}\r\n                            />\r\n                            {\r\n                                done.isloading\r\n                                    ?\r\n                                    <View>\r\n                                        <LoadingSpinner size='large' />\r\n                                    </View > :\r\n                                    <TouchableOpacity style={CommonClass.Downloadbutton} onPress={async () => await DowloadFile()}>\r\n                                        <AntDesign name=\"download\" size={24} color=\"black\" />\r\n                                    </TouchableOpacity>\r\n                            }\r\n\r\n                        </View>\r\n                        {\r\n                            done.error && (<View style={CommonClass.chooseFile}>\r\n                                <Text>Something Went Wrong</Text>\r\n                            </View>)\r\n\r\n                        }\r\n                        {\r\n                            done.done\r\n                            &&\r\n                            (<View style={CommonClass.chooseFile}>\r\n                                <Text>Downloaded Successfully !!</Text>\r\n                            </View>)\r\n                        }\r\n\r\n                    </View>\r\n                }\r\n            </Card.Content>\r\n        </Card >\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}