{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { UserContextProvider } from \"../Contexts/CurrentUserContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar query = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity\n    }\n  }\n});\nexport var GenericBodyCard = function GenericBodyCard(_ref) {\n  var children = _ref.children;\n  _jsx(QueryClientProvider, {\n    client: query,\n    children: _jsx(View, {\n      children: children\n    })\n  });\n};","map":{"version":3,"names":["QueryClient","QueryClientProvider","UserContextProvider","jsx","_jsx","query","defaultOptions","queries","retry","refetchOnWindowFocus","staleTime","Infinity","GenericBodyCard","_ref","children","client","View"],"sources":["D:/Logingfg - Copy/src/GenericComponent/GenericBodyCard.js"],"sourcesContent":["import { View } from \"react-native-web\"\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { UserContextProvider } from '../Contexts/CurrentUserContext';\r\nconst query = new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            // In case of error, we don't want server\r\n            // to overload with retries, with cost per\r\n            // request payment structure, this is not\r\n            // optimal.\r\n            retry: false,\r\n\r\n            // User may be working on multiple things\r\n            // at any given time. So setting this to\r\n            // true, will result in multiper server\r\n            // hits. We are not expecting the data to\r\n            // be updated frequently any ways.\r\n            refetchOnWindowFocus: false,\r\n\r\n            // We don't expect the data will be updated\r\n            // from multiple clients, so it does not makes\r\n            // sence to mark the data stale ever, unless\r\n            // we are making any changes. So by default we\r\n            // will make the cache never stale .. and when\r\n            // we update the data (create, delete or update)\r\n            // we will make the cache invalid.\r\n            staleTime: Infinity\r\n        },\r\n    },\r\n});\r\nexport const GenericBodyCard = ({ children }) => {\r\n    <QueryClientProvider client={query}>\r\n        <View>\r\n            {children}\r\n        </View>\r\n    </QueryClientProvider>\r\n}"],"mappings":";AACA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,uBAAuB;AACxE,SAASC,mBAAmB;AAAyC,SAAAC,GAAA,IAAAC,IAAA;AACrE,IAAMC,KAAK,GAAG,IAAIL,WAAW,CAAC;EAC1BM,cAAc,EAAE;IACZC,OAAO,EAAE;MAKLC,KAAK,EAAE,KAAK;MAOZC,oBAAoB,EAAE,KAAK;MAS3BC,SAAS,EAAEC;IACf;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACtCV,IAAA,CAACH,mBAAmB;IAACc,MAAM,EAAEV,KAAM;IAAAS,QAAA,EAC/BV,IAAA,CAACY,IAAI;MAAAF,QAAA,EACAA;IAAQ,CACP;EAAC,CACU,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}