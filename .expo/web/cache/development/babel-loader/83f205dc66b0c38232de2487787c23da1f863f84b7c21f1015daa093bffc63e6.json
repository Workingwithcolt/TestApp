{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { useState } from \"react\";\nimport { getDateString } from \"../helper/helper\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var GenericDatePicker = function GenericDatePicker(_ref) {\n  var value = _ref.value,\n    Onchange = _ref.Onchange,\n    element = _ref.element;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    show = _useState2[0],\n    setShow = _useState2[1];\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      title: \"Select Date\",\n      onPress: function onPress() {\n        return setShow(true);\n      }\n    }), show && _jsx(DateTimePicker, {\n      value: value,\n      mode: \"date\",\n      nativeID: element.name,\n      is24Hour: true,\n      onChange: function onChange(e) {\n        Onchange(e.nativeEvent.timestamp, element);\n        setShow(false);\n      }\n    }), _jsx(Text, {\n      children: getDateString(value) || \"select Date\"\n    })]\n  });\n};","map":{"version":3,"names":["DateTimePicker","useState","getDateString","View","Text","Button","jsx","_jsx","jsxs","_jsxs","GenericDatePicker","_ref","value","Onchange","element","_useState","_useState2","_slicedToArray","show","setShow","children","title","onPress","mode","nativeID","name","is24Hour","onChange","e","nativeEvent","timestamp"],"sources":["D:/Logingfg - Copy/src/GenericComponent/DatePicker.js"],"sourcesContent":["import DateTimePicker from \"@react-native-community/datetimepicker\"\r\nimport { useState } from \"react\"\r\nimport { getDateString } from \"../helper/helper\"\r\nimport { View, Text, Button } from \"react-native\"\r\n\r\nexport const GenericDatePicker = ({ value, Onchange, element }) => {\r\n    const [show, setShow] = useState(false)\r\n    return (\r\n        <View>\r\n            <Button title=\"Select Date\" onPress={() => setShow(true)}></Button>\r\n            {\r\n                show &&\r\n                <DateTimePicker\r\n                    value={value}\r\n                    mode='date'\r\n                    nativeID={element.name}\r\n                    is24Hour={true}\r\n                    onChange={(e) => {\r\n                        Onchange(e.nativeEvent.timestamp, element)\r\n                        setShow(false)\r\n                    }\r\n                    }\r\n                />}\r\n            <Text>{getDateString(value) || \"select Date\"}</Text>\r\n        </View>\r\n    )\r\n}"],"mappings":";AAAA,OAAOA,cAAc,MAAM,wCAAwC;AACnE,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa;AAA0B,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGhD,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAAqC;EAAA,IAA/BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EACxD,IAAAC,SAAA,GAAwBd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAhCG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,OACIP,KAAA,CAACN,IAAI;IAAAiB,QAAA,GACDb,IAAA,CAACF,MAAM;MAACgB,KAAK,EAAC,aAAa;MAACC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAMH,OAAO,CAAC,IAAI,CAAC;MAAA;IAAC,CAAS,CAAC,EAE/DD,IAAI,IACJX,IAAA,CAACP,cAAc;MACXY,KAAK,EAAEA,KAAM;MACbW,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAEV,OAAO,CAACW,IAAK;MACvBC,QAAQ,EAAE,IAAK;MACfC,QAAQ,EAAE,SAAAA,SAACC,CAAC,EAAK;QACbf,QAAQ,CAACe,CAAC,CAACC,WAAW,CAACC,SAAS,EAAEhB,OAAO,CAAC;QAC1CK,OAAO,CAAC,KAAK,CAAC;MAClB;IACC,CACJ,CAAC,EACNZ,IAAA,CAACH,IAAI;MAAAgB,QAAA,EAAElB,aAAa,CAACU,KAAK,CAAC,IAAI;IAAa,CAAO,CAAC;EAAA,CAClD,CAAC;AAEf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}